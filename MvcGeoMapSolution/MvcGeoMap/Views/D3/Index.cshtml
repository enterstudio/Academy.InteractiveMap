@{
    Layout = null;
}
<<<<<<< HEAD
<!DOCTYPE html>
<html>
<head>
    <title>Index</title>
    <script src="http://d3js.org/d3.v3.min.js" type="text/javascript"></script>
</head>

<style type="text/css">
path {
  stroke: white;
  stroke-width: 0.25px;
  fill: grey;
}

svg
{
  margin-left:auto;
  margin-right:auto;
}
</style>
<body>
    <div>
        Hello World and Index page
    </div>
    <script type="text/javascript">

        var width = 960,
        height = 700;

        var projection = d3.geo.mercator()

        var svg = d3.select("body")
            .append("svg")
			.attr("width", width)
			.attr("height", height);

        var path = d3.geo.path()
            .projection(projection)

        var g = svg.append("g");

        //var coo = results.features[1].coordinates;
        var coordinates = projection([-73.403686, 44.153102]);

        svg.append("circle")
                .attr("cx", coordinates[0])
                .attr("cy", coordinates[1])
                .attr("r", 5)
                .style("fill", "red")
        ;

        svg.append("svg:text")
            .text("Group 1")
        .attr("x", coordinates[0])
        .attr("y", coordinates[1])
        .style("stroke", "black")
        .style("stroke-width", 1)
        .style("font-size", "100%")
        .style("fill", "orange");

        // load and display the USA map
        d3.json("Content/data/maps.json", function (data) {
            g.selectAll("path")
                .data(data.features)
                .enter()
                .append("path")
                .attr("d", path)
                .attr("class", "area")
                .attr("fill", "steelblue");

        });


        // zoom and pan
        var zoom = d3.behavior.zoom()
            .on("zoom", function () {
                g.attr("transform", "translate(" +
                    d3.event.translate.join(",") + ")scale(" + d3.event.scale + ")");
                g.selectAll("path")
                    .attr("d", path.projection(projection));
            });

        svg.call(zoom)

        svg.selectAll("circle")
            .data(data)
            .enter()
            .append("circle")
            .attr("cx", function (d) {
                return projection([d.lon, d.lat])[0];
            })
            .attr("cy", function (d) {
                return projection([d.lon, d.lat])[1];
            })
            .attr("r", 5)
            .style("fill", "yellow")
            .style("opacity", 0.75);


</script>
=======
<script src="http://d3js.org/queue.v1.min.js" type="text/javascript"></script>
<script src="http://d3js.org/topojson.v1.min.js" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/d3tests/colorPallete.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/d3tests/constants.js")" type="text/javascript"></script>

<style>
path {
  fill: rgb(217, 217, 217);
  stroke: #fff;
  stroke-linejoin: round;
}
.background {
  fill: none;
  pointer-events: all;
}

div.tooltip {   
  line-height: 30%;
  position: absolute;           
  text-align: left;           
  width: 150px;                  
  height: 250px;                 
  padding: 2px;             
  font: 10px sans-serif;        
  background: lightsteelblue;   
  border: 0px;      
  border-radius: 8px;           
  pointer-events: none;     
}
div.tooltip h1 {
  font: 12px sans-serif;  
  text-align: center;  
  margin: 1px;
}
div.tooltip p {
  margin: 1px;
  display:table;
}
</style>

<!--
<h2>Graph01</h2>
<div id="graph01"></div>
<script src="@Url.Content("~/Scripts/d3tests/graph01.js")" type="text/javascript"></script>
-->
<h2>Graph02</h2>
<div id="grafikas2" style="text-align:left;">
    <div class="row">
        <div id="adformMetricSelector" class="span4">
        </div>
        <div id="zoomOutControl" class="span4" style="display:none">
            <button id="zoomOutbutton" class="btn">-Zoom Out</button>
        </div>
    </div>
    <div class="row" id="graph02">
    </div>
</div>

<script src="@Url.Content("~/Scripts/d3tests/graph02.js")" type="text/javascript"></script>
>>>>>>> master


<<<<<<< HEAD
=======
        svg.append("path")
            .datum(topojson.feature(all, all.objects.admin0))
            .attr("d", path);



    var width = 960,
        height = 500,
        centered;

    var path = d3.geo.path();

    d3.select("#graph2")
        .attr("width", width)
        .attr("height", height);


    var svg = d3.select("#graph2").append("svg")
        .attr("width", width)
        .attr("height", height);

    svg.append("rect")
        .attr("class", "background")
        .attr("width", width)
        .attr("height", height)
        .on("click", click2);

    var gg = svg.append("g")
        .attr("id", "states");


    d3.json("@Url.Content("~/Content/Json/us.json")", function (error, topology) {
        gg.selectAll("path")
            .data(topojson.feature(topology, topology.objects.states).features)
            .enter().append("g")
            .attr("class", "state")
            .attr("stateID", function (d) { return d.id; })
            .on("click", click2)
            .append("path")
            .attr("d", path);
    });


    function click2(d) {
        var x, y, k;

        if (d && centered !== d) {
            var centroid = path.centroid(d);
            x = centroid[0];
            y = centroid[1];
            k = 4;
            centered = d;
        } else {
            x = width / 2;
            y = height / 2;
            k = 1;
            centered = null;
        }

        var bbb = gg.selectAll("g")
                .classed("state active", centered && function (d) { return d === centered; });

        gg.transition()
            .duration(1000)
            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")scale(" + k + ")translate(" + -x + "," + -y + ")")
            .style("stroke-width", 1.5 / k + "px");





    }


</script>
--
    >
<!--
<script>





    var width = 960,
        height = 500;

    var rateById = d3.map();

    var quantize = d3.scale.quantize()
        .domain([0, .15])
        .range(d3.range(9).map(function (i) { return "q" + i + "-9"; }));

    var path = d3.geo.path();

    var svg = d3.select("body").append("svg")
        .attr("width", width)
        .attr("height", height);

    queue()
        .defer(d3.json, "@Url.Content("~/Content/Json/us.json")")
        .defer(d3.tsv, "@Url.Content("~/Content/data/unemployment.tsv")", function (d) { rateById.set(d.id, +d.rate); })
        .await(ready);

    function ready(error, us) {
        svg.append("g")
            .attr("class", "counties")
          .selectAll("path")
            .data(topojson.feature(us, us.objects.counties).features)
          .enter().append("path")
            .attr("class", function (d) { return quantize(rateById.get(d.id)); })
            .attr("d", path);

        svg.append("path")
            .datum(topojson.mesh(us, us.objects.states, function (a, b) { return a !== b; }))
            .attr("class", "states")
            .attr("d", path);
    }

/////////////////////////////
var txt = '{"colors":[' +
'{"range":"10000","color":"yellow" },' +
'{"range":"20000","color":"green" },' +
'{"range":"30000","color":"red" }]}';

var obj = eval ("(" + txt + ")");

<table border="1">
<tr>
<td bgcolor="#FFFF00"></td>
<td bgcolor="#00FF00"></td>
<td bgcolor="#FF0000"></td>
</tr>
<tr>
<td>document.getElementById("range").innerHTML=obj.colors[0].range</td>
<td>document.getElementById("range").innerHTML=obj.colors[1].range</td>
<td>document.getElementById("range").innerHTML=obj.colors[2].range</td>
</tr>
</table> 


//document.getElementById("range").innerHTML=obj.colors[0].range 
//document.getElementById("color").innerHTML=obj.colors[0].color
//document.getElementById("range").innerHTML=obj.colors[1].range 
//document.getElementById("color").innerHTML=obj.colors[1].color 
//document.getElementById("range").innerHTML=obj.colors[2].range 
//document.getElementById("color").innerHTML=obj.colors[2].color  


//for(var i=0; i<3;i++){
//document.getElementById("range").innerHTML=obj.colors[i].range
//document.getElementById("color").innerHTML=obj.colors[i].color
//}

////////////////////////////////////////////////////////

</script>
>>>>>>> master

</body>
</html>
